library(survival)
library(randomForest)
library(tidyverse)
df <- na.roughfix(lung) %>% select(-inst)
m <- coxph(Surv(time, status)~., data = df)
Î² <- m$coefficients
ll_r <- logLik(m)[[1]]
?logLik
ll_r <- logLik.coxph(m)[[1]]
?logLik.coxph
m <- coxph(Surv(time, status)~., data = df, ties = "breslow")
ll_r <- logLik.coxph(m)[[1]]
ll_r <- logLik(m)[[1]]
ll_r
X = df[3:ncol(df)]
death_ind = df$status - 1
y = df$time
predict(m, X)
preds = predict(m, X)
preds
preds = predict(m, X, type="linear")
preds = predict(m, X, type="lp")
preds
X*b
b <- m$coefficients
b
X*b
b
dm
m
X*exp(b)
exp(X*b)
X*b''
X*t(b)
m$loglik
ll_r <- logLik(m)[[1]]
ll_r
View(df)
exp(-731.43)
?lung
m <- coxph(Surv(time, status==2)~., data = df, ties = "breslow")
b <- m$coefficients
ll_r <- logLik(m)[[1]]
ll_r
m
m$linear.predictors
m$nevent
coxph(Surv(time, status==2)~., data = df, ties = "breslow",
init=b, control=list(iter.max=0))
coxph(Surv(time, status==2)~., data = df, ties = "breslow",
init=b)
m2 <- coxph(Surv(time, status==2)~., data = df, ties = "breslow",
init=b)
m2$loglik
m2 <- coxph(Surv(time, status==2)~., data = df, ties = "breslow",
init=b, max.iter = 0)
m2 <- coxph(Surv(time, status==2)~., data = df, ties = "breslow",
init=b, iter.max = 0)
m2
m2$loglik
m2 <- coxph(Surv(time, status==2)~., data = df, ties = "efron",
init=b, iter.max = 0)
m2$loglik
m2 <- coxph(Surv(time, status==2)~., data = df, ties = "breslow",
init=b, iter.max = 0)
b + .01
m2 <- coxph(Surv(time, status==2)~., data = df, ties = "breslow",
init=b+.01, iter.max = 0)
m2$loglik
bmod = b + c(0,0,0,0,.01,0,0)
m2 <- coxph(Surv(time, status==2)~., data = df, ties = "breslow",
init=bmod, iter.max = 0)
m2$loglik
df_distinct <- df %>% distinct_at(time)
df_distinct <- df %>% distinct_at(vars=time)
df_distinct <- df %>% distinct_at(.vars=time)
distinct_at(df, vars=time)
?distinct_at
df_distinct <- df %>% distinct_at(df, vars(time))
df_distinct <- df %>% distinct_at(vars(time))
df_distinct
df_distinct <- df[!duplicated(df$time), ]
df0 <- na.roughfix(lung) %>% select(-inst)
df <- df0[!duplicated(df0$time), ]
m <- coxph(Surv(time, status==2)~., data = df, ties = "breslow")
b <- m$coefficients
ll_r <- logLik(m)[[1]]
ll_r
setwd("~/git/JHU-MSK-code/src")
set.seed(1234)
filepath = "../JHU+MSK"
savedir  = "pre-cv-newimpute-lowdepth"
n_years = 5
train <- read.csv(paste0(filepath,"/Cox-csv/",savedir,"_other_game_mdkm.csv"))
test <- read.csv(paste0(filepath,"/Cox-csv/",savedir,"_test_game_mdkm.csv"))
bue <- read.csv(paste0(filepath,"/Cox-csv/",savedir,"_bue_game_mdkm.csv"))
train$leaf = as.factor(train$leaf)
test$leaf = as.factor(test$leaf)
bue$leaf = as.factor(bue$leaf)
train$died = as.integer(train$died == 'True')
test$died = as.integer(test$died == 'True')
bue$died  = as.integer(bue$died  == 'True')
levels(train$tumor.site.of.primary.CRC)
setwd("~/Dropbox (MIT)/research/clustering/Experiments/runtime_benchmarks_oct/src")
library(data.table)
library(tidyverse)
library("RColorBrewer")
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
setwd("../results_kmeans0/")
filenames <- list.files(pattern="ws_[a-z]*.csv$", full.names=TRUE)
df <- data.frame()
for (filename in filenames) {
file_short <- substr(filename,3,nchar(filename)-4);
df_next <- read.table(file = filename, sep = ",", header = T)
df_next$filename <- file_short
df <- rbind(df, df_next)
}
setwd("~/git/Optimal_Clustering_Trees/revision/complete_comparison_fcps/results")
setwd("../results_kmeans0/")
filenames <- list.files(pattern="ws_[a-z]*.csv$", full.names=TRUE)
df <- data.frame()
for (filename in filenames) {
file_short <- substr(filename,3,nchar(filename)-4);
df_next <- read.table(file = filename, sep = ",", header = T)
df_next$filename <- file_short
df <- rbind(df, df_next)
}
write.csv(df, file = paste0("../full_scaling_results_kmeans0.csv"), row.names = FALSE)
### Check job completion
data <- c("Atom", "Chainlink",
"Hepta", "Lsun", "Target",
"Tetra", "TwoDiamonds", "WingNut")
seeds <- c(1,2,3,4,5)
criterion <- c("silhouette","dunnindex")
thresholds = c(0.0,0.9,.99);
ws = c("none","oct")
df_match <- df %>% filter(method == "ICOT_local") %>%
select("data","criterion","geom_threshold","warm_start","seed","runtime")
#
job_status <- as.data.frame(expand.grid(data, criterion, thresholds, ws, seeds)) %>%
`colnames<-`(c("data","criterion","geom_threshold","warm_start","seed")) %>%
left_join(., df_match, by = c("data", "criterion", "geom_threshold", "warm_start", "seed")) %>%
arrange(data, criterion, geom_threshold, warm_start, seed)
### Runtime
runtime_avgs <- df_match %>% filter(data != "EngyTime") %>%
mutate(warm_start = if_else(warm_start == "oct", "K-means", "None"),
geom_threshold = as.factor(geom_threshold)) %>%
group_by(criterion, geom_threshold, warm_start) %>%
summarize(result_cnt = n(),
avg_runtime = mean(runtime/60),
sd_runtime = sd(runtime/60))
df_match %>% filter(data != "EngyTime") %>%
filter(criterion == "silhouette") %>%
group_by(geom_threshold, warm_start) %>%
summarize(result_cnt = n(),
avg_runtime = mean(runtime/60),
sd_runtime = sd(runtime/60))
sil_plot <- runtime_avgs %>%
filter(criterion == "silhouette") %>%
ggplot(aes(x = geom_threshold, y = avg_runtime, color = warm_start, group = warm_start)) +
scale_colour_manual(values=cbPalette)+
geom_line() +
geom_point()+
theme_light()+
labs(x = "Geometric Search Threshold (T)", y="Average Runtime (Minutes)", color = "Warm Start")
dunn_plot <- runtime_avgs %>%
filter(criterion == "dunnindex") %>%
ggplot(aes(x = geom_threshold, y = avg_runtime, color = warm_start, group = warm_start)) +
scale_colour_manual(values=cbPalette)+
geom_line() +
geom_point()+
theme_light()+
labs(x = "Geometric Search Threshold (T)", y="Average Runtime (Minutes)", color = "Warm Start")
sil_plot
dunn_plot
dunn_plot <- runtime_avgs %>%
filter(criterion == "dunnindex") %>%
ggplot(aes(x = geom_threshold, y = avg_runtime, color = warm_start, group = warm_start)) +
scale_colour_manual(values=cbPalette)+
geom_line() +
geom_point()+
theme_light()+
theme(text = element_text(size=20)) +
labs(x = "Geometric Search Threshold (T)", y="Average Runtime (Minutes)", color = "Warm Start")
sil_plot
dunn_plot
dunn_plot <- runtime_avgs %>%
filter(criterion == "dunnindex") %>%
ggplot(aes(x = geom_threshold, y = avg_runtime, color = warm_start, group = warm_start)) +
scale_colour_manual(values=cbPalette)+
geom_line() +
geom_point()+
theme_light()+
theme(text = element_text(size=15x)) +
labs(x = "Geometric Search Threshold (T)", y="Average Runtime (Minutes)", color = "Warm Start")
dunn_plot <- runtime_avgs %>%
filter(criterion == "dunnindex") %>%
ggplot(aes(x = geom_threshold, y = avg_runtime, color = warm_start, group = warm_start)) +
scale_colour_manual(values=cbPalette)+
geom_line() +
geom_point()+
theme_light()+
theme(text = element_text(size=15)) +
labs(x = "Geometric Search Threshold (T)", y="Average Runtime (Minutes)", color = "Warm Start")
sil_plot
dunn_plot
sil_plot <- runtime_avgs %>%
filter(criterion == "silhouette") %>%
ggplot(aes(x = geom_threshold, y = avg_runtime, color = warm_start, group = warm_start)) +
scale_colour_manual(values=cbPalette)+
geom_line() +
geom_point()+
theme_light()+
theme(text = element_text(size=15)) +
labs(x = "Geometric Search Threshold (T)", y="Average Runtime (Minutes)", color = "Warm Start")
dunn_plot <- runtime_avgs %>%
filter(criterion == "dunnindex") %>%
ggplot(aes(x = geom_threshold, y = avg_runtime, color = warm_start, group = warm_start)) +
scale_colour_manual(values=cbPalette)+
geom_line() +
geom_point()+
theme_light()+
theme(text = element_text(size=15)) +
labs(x = "Geometric Search Threshold (T)", y="Average Runtime (Minutes)", color = "Warm Start")
sil_plot
dunn_plot
