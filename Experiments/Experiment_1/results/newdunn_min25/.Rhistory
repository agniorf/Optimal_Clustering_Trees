length(fit$residuals[1000])
names(fit$residuals)
head(fit$residuals)
cor(fit$residuals[,ge])
length(fit$residuals[,ge])
length(fit$residuals[,'ge'])
cor.test(fit$residuals[,'ge'],fit$residuals[,'ibm'])
cor.test(fit$residuals[,'ge'],fit$residuals[,'mobil'])
cor.test(fit$residuals[,'mobil'],fit$residuals[,'ibm'])
var(FFdata$Mkt.RF)
var(FFdata$SMB)
var(FFdata$HML)
var1 = (B1^2)*factor_var
B1 = c(.5,.5,-.1)
B2 = c(.6,.15,.7)
resid_var1 = 21
resid_var2 = 35
factor_var=c(var(FFdata$Mkt.RF),var(FFdata$SMB),var(FFdata$HML))
var1 = (B1^2)*factor_var
var1
var1 = (B1^2)%*%factor_var
var1
B1[1]*factor_var[1]+B1[2]*factor_var[2]+B1[3]*factor_var[3]
B1[1]^2*factor_var[1]+B1[2]^2*factor_var[2]+B1[3]^2*factor_var[3]
var1 = (B1^2)%*%factor_var + resid_var1
var2 = (B2^2)%*%factor_var + resid_var2
var1
var2
B = cbind(c(.5,.5,-.1),c(.6,.15,.7))
B
B = rbind(c(.5,.5,-.1),c(.6,.15,.7))
B
B = cbind(c(.5,.5,-.1),c(.6,.15,.7))
cov(cbind(FFdata$Mkt.RF, FFdata$SMB, FFdata$HML))
cov_factors = cov(cbind(FFdata$Mkt.RF, FFdata$SMB, FFdata$HML))
B = cbind(c(.5,.5,-.1),c(.6,.15,.7))
B%*%cov_factors%*%t(B)
t(B)%*%cov_factors%*%B
var1
var2
diag (21,35)
diag (c(21,35)
diag (c(21,35))
B = cbind(c(.5,.5,-.1),c(.6,.15,.7))
diag (c(21,35))
t(B)%*%cov_factors%*%B + diag (c(21,35))
t(B)
cov_factors
B
cov_returns = t(B)%*%cov_factors%*%B + diag (c(21,35))
cov_returns
# QUESTION 4
B = cbind(c(.5,.5,-.1),c(.6,.15,.7)) # first column is stock 1, second column is stock 2
cov_returns = t(B)%*%cov_factors%*%B + diag (c(21,35))
cov_returns
# QUESTION 3
cov_factors = cov(cbind(FFdata$Mkt.RF, FFdata$SMB, FFdata$HML))
cov_factors
data = read.csv("AlphaBeta.csv")
head(data)
len(data)
length(data)
length(data[,1])
library(linprog)
m = len(data[,1])
m = length(data[,1])
m = length(data$alpha)
mcLP = data$alpha
data = read.csv("AlphaBeta.csv")
m = length(data$alpha)
cLP = data$alpha
A_lb = diag(1)
A_lb = diag(1, nrow=m)
A_ub = diag(-1, nrow=m)
A_beta = data$beta
AmatLP = rbind(A_lb,A_ub,A_beta)
bvecLP = c(rep(.2,2*m),0)
const.dir=c(rep("<=",2*m),"=")
LP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = TRUE)
LP_max
LP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = FALSE)
LP_max$value
LP_max$opt
const.dir=c(rep("<=",2*m),"<=")
LP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = FALSE)
LP_max$opt
AmatLP
len(AmatLP)
length(AmatLP)
View(AmatLP)
cLP
data$alpha[6]
data$alpha[7]
data$beta[6]
data$beta[7]
a = rbind(c(1,1),c(t3,t4))
t1 = data$alpha[6]
t2 = data$alpha[7]
t3 = data$beta[6]
t4 = data$beta[7]
a = rbind(c(1,1),c(t3,t4))
a
solveLP(c(t1,t2),bvec=c(1,-1,0),Amat=a,lpSolve = T, const.dir=c("<=",">=","="), maximum = TRUE)
t1 = data$alpha[6]
t2 = data$alpha[7]
t3 = data$beta[6]
t4 = data$beta[7]
a = rbind(c(1,1),c(1,1),c(t3,t4))
solveLP(c(t1,t2),bvec=c(1,-1,0),Amat=a,lpSolve = T, const.dir=c("<=",">=","="), maximum = TRUE)
solveLP(c(t1,t2),bvec=c(1,-1,0),Amat=a,lpSolve = T, const.dir=c("<=","="), maximum = TRUE)
solveLP(c(t1,t2),bvec=c(1,-1,0),Amat=a,lpSolve = T, const.dir=c("<=","<=","="), maximum = TRUE)
solveLP(c(t1,t2),bvec=c(1,-1,2),Amat=a,lpSolve = T, const.dir=c("<=","<="), maximum = TRUE)
solveLP(c(t1,t2),bvec=c(1,-1,2),Amat=a,lpSolve = T, const.dir=c("<=",">=","<="), maximum = TRUE)
solveLP(c(t1,t2),bvec=c(.5,-1,2),Amat=a,lpSolve = T, const.dir=c("<=",">=","<="), maximum = TRUE)
solveLP(c(t1,t2),bvec=c(.5,-1,0),Amat=a,lpSolve = T, const.dir=c("<=",">=","<="), maximum = TRUE)
solveLP(c(t1,t2),bvec=c(1,-1,-1),Amat=a,lpSolve = T, const.dir=c("<=",">=","<="), maximum = TRUE)
solveLP(c(t1,t2),bvec=c(1,-1,-1),Amat=a,lpSolve = T, const.dir=c("<=",">=","="), maximum = TRUE)
solveLP(c(t1,t2),bvec=c(1,-1,-1),Amat=a,lpSolve = T, const.dir=c("<=",">=","="), maximum = FALSE)
solveLP(c(t1,t2),bvec=c(1,-1,-1),Amat=a,lpSolve = T, const.dir=c("<=",">=","="), maximum = TRUE)
cLP = data$alpha
A_lb = diag(1, nrow=m)
A_ub = diag(-1, nrow=m)
A_beta = data$beta
AmatLP = rbind(A_lb,A_ub,A_beta)
bvecLP = c(rep(.2,m),rep(-.2,m),0)
const.dir=c(rep("<=",m),rep(">=",m),"=")
LP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = FALSE)
LP_max$opt
LP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = TRUE)
LP_max$opt
A_test = cbind(c(1),rep(0,m-1))
A_test = rbind(c(1),rep(0,m-1))
A_test = rbind(c(1),c(rep(0,m-1)))
A_test = rbind(c(1),c(rep(0,m-1)))
A_test = c(rep(0,m-1))
A_test[1]=1
cLP = data$alpha
A_lb = diag(1, nrow=m)
A_ub = diag(-1, nrow=m)
A_beta = data$beta
A_test = c(rep(0,m))
A_test[1]=1
AmatLP = rbind(A_lb,A_ub,A_beta,A_test)
bvecLP = c(rep(.2,m),rep(-.2,m),0,.2)
const.dir=c(rep("<=",m),rep(">=",m),"=","=")
LP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = FALSE)
LP_max
cLP = c(rep(data$alpha,2))
A_lb = cbind(diag(1, nrow=m),diag(0,nrow=m))
A_ub = cbind(diag(0,nrow=m)mdiag(1, nrow=m))
A_ub = cbind(diag(0,nrow=m),diag(1, nrow=m))
A_beta = cbind(rep(data$beta,2))
AmatLP = rbind(A_lb,A_ub,A_beta)
A_beta = c(rep(data$beta,2))
AmatLP = rbind(A_lb,A_ub,A_beta)
bvecLP = c(rep(.2,m),rep(.2,m),0)
const.dir=c(rep("<=",2*m),"=","=")
LP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = FALSE)
const.dir=c(rep("<=",2*m),"=")
LP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = FALSE)
LP_max$opt
AmatLP1 = cbind(diag(1,nrow=m),matrix(0,nrow=m,ncol=m))
AmatLP2 = cbind(matrix(0,nrow=m,ncol=m),diag(1,nrow=m))
AmatLP3 = c(rep(1,m),rep(-1,m))
Amat_beta = c(data$beta,-data$beta)
AmatLP = rbind(AmatLP1,AmatLP2,AmatLP3,Amat_beta)
bvecLP = c(rep(.2,m),rep(.2,m),1,0)
cLP = c(data$alpha,-data$alpha)
const.dir= c(rep("<=",2*m),"=","=")
resultLP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = TRUE)
round(c(resultLP_min$opt,resultLP_max$opt), 6)
round(c(resultLP_max$opt), 6)
cLP = c(data$alpha,-data$alpha)
A_lb = cbind(diag(1, nrow=m),diag(0,nrow=m))
A_ub = cbind(diag(0,nrow=m),diag(1, nrow=m))
A_beta = c(data$beta,-data$beta)
A_weights = c(rep(1,m),rep(-1,m))
AmatLP = rbind(A_lb,A_ub,A_beta,A_weights)
bvecLP = c(rep(.2,m),rep(.2,m),0,1)
const.dir=c(rep("<=",2*m),"=","=")
LP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = TRUE)
LP_max$opt
LP_max$value
LP_max$values
LP_max$result
LP_max$solution
LP_max$solution[1:80]
rbind(LP_max$solution[1:80],LP_max$solution[81:160])
weights = LP_max$solution[1:80]-LP_max$solution[81:160]
weights
t(weights)
weights
weights = c(LP_max$solution[1:80]-LP_max$solution[81:160])
weights
data = read.csv("AlphaBeta.csv")
m = length(data$alpha)
cLP = c(data$alpha,-data$alpha)
A_lb = cbind(diag(1, nrow=m),diag(0,nrow=m))
A_ub = cbind(diag(0,nrow=m),diag(1, nrow=m))
A_beta = c(data$beta,-data$beta)
A_weights = c(rep(1,m),rep(-1,m))
AmatLP = rbind(A_lb,A_ub,A_beta,A_weights)
bvecLP = c(rep(.2,m),rep(.2,m),0,1)
const.dir=c(rep("<=",2*m),"=","=")
LP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = TRUE)
weights = c(LP_max$solution[1:80]-LP_max$solution[81:160])
weights
LP$max = LP_max$opt
LP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = TRUE)
LP$max = LP_max$opt
LP_max$opt
sum(weights)
sum(weights%*%data$beta)
sum(weights%*%data$alpha)
X_6mth = 105*exp(1.01*.5)
X_6mth
X_6mth = 105*exp(.01*1)
X_6mth
X_6mth = 105*exp(1.01*1)
X_6mth
X_6mth = 105*exp(.01*1)
X_6mth
X_6mth = 105*exp(.01*.5)
X_6mth
library(linprog)
data = read.csv("AlphaBeta.csv")
m = length(data$alpha)
cLP = c(data$alpha,-data$alpha)
A_lb = cbind(diag(1, nrow=m),diag(0,nrow=m))
A_ub = cbind(diag(0,nrow=m),diag(1, nrow=m))
A_beta = c(data$beta,-data$beta)
A_weights = c(rep(1,m),rep(-1,m))
AmatLP = rbind(A_lb,A_ub,A_beta,A_weights)
bvecLP = c(rep(.2,m),rep(.2,m),0,1)
const.dir=c(rep("<=",2*m),"=","=")
LP_max = solveLP(cvec = cLP, bvec = bvecLP, Amat = AmatLP, lpSolve = T, const.dir = const.dir, maximum = TRUE)
LP_max$opt
weights = c(LP_max$solution[1:80]-LP_max$solution[81:160])
weights
sum(weights)
sum(weights%*%data$alpha)
options(round=2)
weights
S = 77
t = 0
T = 1
K = 79
sigma = .275 # volatility
r = .01
BlackScholesSim = function(S, T, t, K, sigma, r, Niter = 1e08, seed = 4360)
{
set.seed(seed)
Z = rnorm(Niter)
X = S*exp(-sigma^2/2*(T-t) + sigma*sqrt(T-t)*Z) - K*exp(-r*(T-t))
Ind = as.numeric(X>0)
payoff = X*Ind
c(mean(payoff),sd(payoff),Niter)
}
t1 = proc.time()
sim_results = BlackScholesSim(S,T,t,K,sigma,r,seed=123)
t2= proc.time()
t2-t1
sim_results
source('~/4630 hw8.R', echo=TRUE)
sim_results[1]
sim_results[2]
sim_results[2]/sqrt(sim_results[3])
2.58*sim_results[2]/sqrt(sim_results[3])
d1 = (ln(S/K) + (r+sigma^2/2)*T)/(sigma*sqrt(T))
d1 = (log(S/K) + (r+sigma^2/2)*T)/(sigma*sqrt(T))
d2 = d1-sigma*sqrt(T)
?pnorm
C = pnorm(d1)*S - pnorm(d2)*K*exp(-r*T)
BlackScholes(S,T,t,K,sigma,r)
# QUESTION 3
BlackScholes = function(S, T, t, K, sigma, r)
{
d1 = (log(S/K) + (r+(sigma^2)/2)*T)/(sigma*sqrt(T))
d2 = d1-sigma*sqrt(T)
C = pnorm(d1)*S - pnorm(d2)*K*exp(-r*T)
C
}
BlackScholes(S,T,t,K,sigma,r)
sim_results[1]-2.58*sim_results[2]/sqrt(sim_results[3])
sim_results[1]+2.58*sim_results[2]/sqrt(sim_results[3])
sim_results
BlackScholes = function(S, T, t, K, sigma, r)
{
d1 = (log(S/K) + (r+(sigma^2)/2)*T)/(sigma*sqrt(T-t))
d2 = d1-sigma*sqrt(T-t)
C = pnorm(d1)*S - pnorm(d2)*K*exp(-r*T)
C
}
BlackScholes(S,T,t,K,sigma,r)
call_option = BlackScholes(S,T,t,K,sigma,r)
put_option = call_option + exp(-r*(T-t)*K-S)
put_option
put_option = call_option + exp(-r*(T-t))*K-S
call_option = BlackScholes(S,T,t,K,sigma,r)
put_option = call_option + exp(-r*(T-t))*K-S
put_option
Brownian_sim(1000,.5,.05,.25,r)
Brownian_sim = function(steps, end_yr, drift, vol, r)
{
time = (1:steps)/(365*end_yr)
normal = rnorm(steps,0,1)
B_t = cumsum(normal)
P_t = P0*exp((r-vol^2/2)*time+vol*B_t)
}
Brownian_sim(1000,.5,.05,.25,r)
Brownian_sim(S,1000,.5,.05,.25,r)
Brownian_sim = function(P0, steps, end_yr, drift, vol, r)
{
time = (1:steps)/(365*end_yr)
normal = rnorm(steps,0,1)
B_t = cumsum(normal)
P_t = P0*exp((r-vol^2/2)*time+vol*B_t)
}
Brownian_sim(S,1000,.5,.05,.25,r)
Brownian_sim = function(P0, steps, end_yr, drift, vol, r)
{
time = (1:steps)/(365*end_yr)
normal = rnorm(steps,0,1)
B_t = cumsum(normal)
P_t = P0*exp((r-vol^2/2)*time+vol*B_t)
P_t
}
Brownian_sim(S,1000,.5,.05,.25,r)
Brownian_sim(S,1000,.5,.05/365,.25/365,r)
x = Brownian_sim(S,1000,.5,.05/365,.25/365,r)
x[-1]
x[,-1]
x[1]
len(x)
length(x)
x[length(x)]
Brownian_sim = function(P0, steps, end_yr, drift, vol, r)
{
time = (1:steps)/(365*end_yr)
normal = rnorm(steps,0,1)
B_t = cumsum(normal)
P_t = P0*exp((r-vol^2/2)*time+vol*B_t)
P_t[steps]
}
x = Brownian_sim(S,1000,.5,.05/365,.25/365,r)
x
{
time = (1:steps)/(365*end_yr)
normal = rnorm(steps,0,1)
B_t = cumsum(normal)
P_t = P0*exp((r-vol^2/2)*time+vol*B_t)
P_t[steps] #return final value at .5 years
}
niter=10000
results=matrix(nrow=10000,ncol=1)
for (i in 1:200)
{
x = Brownian_sim(S,1000,.5,.05/365,.25/365,r)
log_return = log(x/S)
results[i]=log_return
}
Brownian_sim = function(P0, steps, end_yr, drift, vol, r)
{
time = (1:steps)/(365*end_yr)
normal = rnorm(steps,0,1)
B_t = cumsum(normal)
P_t = P0*exp((r-vol^2/2)*time+vol*B_t)
P_t[steps] #return final value at .5 years
}
niter=10000
results=matrix(nrow=10000,ncol=1)
for (i in 1:200)
{
x = Brownian_sim(S,1000,.5,.05/365,.25/365,r)
log_return = log(x/S)
results[i]=log_return
}
hist(results)
mean(results)
average(results)
stdev(results)
sd(results)
View(results)
niter=10000
results=matrix(nrow=10000,ncol=1)
for (i in 1:100000)
{
x = 200*Brownian_sim(S,1000,.5,.05/365,.25/365,r)
log_return = log(x/(200*S))
results[i]=log_return
}
hist(results)
sd(results)
BlackScholes = function(S, T, t, K, sigma, r)
{
d1 = (log(S/K) + (r+(sigma^2)/2)*T-t)/(sigma*sqrt(T-t))
d2 = d1-sigma*sqrt(T-t)
C = pnorm(d1)*S - pnorm(d2)*K*exp(-r*(T-t))
C
}
call_option = BlackScholes(S,T,t,K,sigma,r)
call_option
mean(results)
sd(results)
hist(results)
install.packages("rcdk")
smiles = c('CCN(C)(C)')
mols = parse.smiles(smiles)
library(rcdk)
install.packages("rJava")
library(rJava)
install("rJava")
install.packages("rJava")
install.packages("rcdk")
library(rcdk)
library(rJava)
library(rJava)
R.Version()
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install(rJava)
install.packages(rJava)
install.packages("rJava")
library(rJava)
install.packages(c("xlsxjars", "xlsx"))
install.packages("rJava")
install.packages("rJava", type = "binary")
library("rJava")
install.packages("rJava")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("rJava")
library(rJava)
library(rJava)
install.packages("rJava")
library(rJava)
library("rJava")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("rJavva")
install.packages("rJava")
library("rJava")
library("rJava")
install.packages("rJava")
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:rJava", unload=TRUE)
install.packages("rJava")
library(rJava)
.rs.restartR()
install.packages("rJava")
library(rJava)
.rs.restartR()
library(rJava)
install.packages(rcdk)
install.packages("rcdk"")
""
install.packages("rcdk")
library(rcdk)
smiles = c('CCN')
mols = parse.smiles(smiles)
mols
fp = get.fingerprint(mols, type='maccs')
mols[[1]]
fp = get.fingerprint(mols[[1]], type='maccs')
fp
smiles = c('CCN','CCN(C)(C)')
mols = parse.smiles(smiles)
fp = get.fingerprint(mols[[1]], type = 'maccs')
fp
fps = lapply(mols.getfingerprint, type = 'maccs')
fps = lapply(mols, get.fingerprint, type = 'maccs')
fps
smiles = c('CCN','CCN(C)(C)')
mols = parse.smiles(smiles)
fps = lapply(mols, get.fingerprint, type = 'maccs')
fps
erloinib = parse.smiles('
COCCOC1=C(OCCOC)C=C2C(NC3=CC=CC(=C3)C#C)=NC=NC2=C1')
erlotinib = parse.smiles('COCCOC1=C(OCCOC)C=C2C(NC3=CC=CC(=C3)C#C)=NC=NC2=C1')
fingerprint = get.fingerprint(erlotinib)
fingerprint = get.fingerprint(erlotinib[[1]])
fingerprint
fingerprint.bits
fingerprint.bitson
fingerprint.length
fingerprint.length()
length(fingerprint)
fingerprint = get.fingerprint(erlotinib[[1]], type='maccs')
length(fingerprint)
show(fingerprint)
count(fingerprint)
unlink(".RData")
install.packages("pROC")
setwd("~/git/Optimal_Clustering_Trees/Experiments/Experiment_1/results/newdunn_min25")
library(data.table)
library(tidyverse)
filenames <- list.files(pattern="*.csv$", full.names=TRUE)
filenames <- setdiff(filenames, "./summary.csv")
df <- data.frame()
df_params <- data.frame()
for (filename in filenames) {
str = filename
x <- unlist(strsplit(str, "-"))
dataname <- substr(x[2],1,nchar(x[2])-4); metric <- x[3]; method <- substr(x[4],1,nchar(x[4])-4);
df_next <- read.table(file = filename, sep = ",", header = T)
df_next$dataname <- dataname
df_next$metric <- metric
df_next$method <- method
df <- rbind(df, df_next)
df_next <- read.table(file = filename, sep = ",", header = T)
df_params <- rbind(df_params, df_next)
}
write.csv(df, "summary_newdunn_min25.csv", row.names = F)
